name: CI

on: [push, pull_request]

jobs:
  check:
    # Run `cargo check` first to ensure that the pushed code at least compiles.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, 1.39.0]
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/checkout@master
    - name: Check
      run: cargo check --all --bins --examples --tests --benches

  cargo-hack:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # cargo hack --feature-powerset will have a significant permutation
        # number, we can't just use --all as it increases the runtime
        # further than what we would like to
        subcrate:
        - tracing-attributes
        - tracing-core
        - tracing-futures
        - tracing-log
        - tracing-macros
        - tracing-serde
        - tracing-tower
        # tracing and tracing-subscriber have too many features to be checked by
        # cargo-hack --feature-powerset, combinatorics there is exploding.
        #- tracing
        #- tracing-subscriber
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: install cargo-hack
      run: cargo install cargo-hack
    - name: cargo hack check
      working-directory: ${{ matrix.subcrate }}
      run: cargo hack check --feature-powerset --no-dev-deps

  cargo-check-tracing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        featureset:
        - ""
        - async-await
        - async-await std
        - async-await log-always
        - async-await std log-always
        - log-always
        - std log-always
        - std
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: cargo check
      working-directory: tracing
      run: cargo check --no-default-features --features "${{ matrix.featureset }}"

  cargo-check-subscriber:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        featureset:
        - ""
        - fmt
        - fmt ansi
        - fmt json
        - fmt json ansi
        - fmt registry
        - fmt env-filter
        - registry
        - env-filter
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: cargo check
      working-directory: tracing-subscriber
      run: cargo check --no-default-features --features "${{ matrix.featureset }}"

  test-versions:
    # Test against the stable, beta, and nightly Rust toolchains on ubuntu-latest.
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly, 1.39.0]
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/checkout@master
    - name: Build
      run: cargo build
    - name: Run tests
      run: cargo test --all

  test-os:
    # Test against stable Rust across macOS, Windows, and Linux.
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: Build
      run: cargo build
    - name: Run tests
      run: cargo test --all

  features-stable:
    # Feature flag tests that run on stable Rust.
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: "Test log support"
      run: (cd tracing/test-log-support && cargo test)
    - name: "Test static max level"
      run: (cd tracing/test_static_max_level_features && cargo test)
    - name: "Test tracing-core no-std support"
      run: (cd tracing-core && cargo test --no-default-features)
    - name: "Test tracing no-std support"
      run: (cd tracing && cargo test --no-default-features)
    - name: "Test tracing all features"
      run: cargo test -p tracing --all-features

  features-nightly:
    # Feature flag tests for features that require nightly Rust.
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
    - uses: actions/checkout@master
    - name: "Test tracing-futures std::future support"
      run: (cd tracing-futures/test_std_future && cargo test)
    - name: "Test tracing-attributes async/await support"
      run: (cd tracing/test_static_max_level_features && cargo test)
    - name: "Test tracing-core no-std support"
      run: (cd tracing-attributes/test_async_await && cargo test)
    - name: "Test nightly-only examples"
      run: (cd nightly-examples && cargo test)

  style:
    # Check style.
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: rustfmt
      run: cargo fmt --all -- --check

  warnings:
    # Check for any warnings. This is informational and thus is allowed to fail.
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@master
    - name: warnings
      run: RUSTFLAGS="-Dwarnings" cargo check --all
