name: CI

on:
  push:
    branches:
    - master
  pull_request: {}

jobs:
  check:
    # Run `cargo check` first to ensure that the pushed code at least compiles.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, 1.42.0]
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
    - name: Check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --bins --examples --tests --benches

  cache-cargo-hack:
    runs-on: ubuntu-latest
    steps:
    - name: Fetch latest release version of cargo-hack
      run: |
        mkdir -p .github/caching
        curl -sL https://api.github.com/repos/taiki-e/cargo-hack/releases/latest | jq -r '.name' > .github/caching/cargo-hack.lock
    - name: Cache cargo-hack/bin
      id: cache-cargo-hack
      uses: actions/cache@v1
      with:
        path: ${{ runner.tool_cache }}/cargo-hack/bin
        key: cargo-hack-bin-${{ hashFiles('.github/caching/cargo-hack.lock') }}
    - name: Install cargo-hack
      if: "steps.cache-cargo-hack.outputs.cache-hit != 'true'"
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: --root ${{ runner.tool_cache }}/cargo-hack --force cargo-hack

  cargo-hack:
    needs: cache-cargo-hack
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # cargo hack --feature-powerset will have a significant permutation
        # number, we can't just use --all as it increases the runtime
        # further than what we would like to
        subcrate:
        - tracing-attributes
        - tracing-core
        - tracing-futures
        - tracing-log
        - tracing-macros
        - tracing-serde
        - tracing-tower
        # tracing and tracing-subscriber have too many features to be checked by
        # cargo-hack --feature-powerset, combinatorics there is exploding.
        #- tracing
        #- tracing-subscriber
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Fetch latest release version of cargo-hack
      run: |
        mkdir -p .github/caching
        curl -sL https://api.github.com/repos/taiki-e/cargo-hack/releases/latest | jq -r '.name' > .github/caching/cargo-hack.lock
    - name: Restore cargo-hack/bin
      uses: actions/cache@v1
      with:
        path: ${{ runner.tool_cache }}/cargo-hack/bin
        key: cargo-hack-bin-${{ hashFiles('.github/caching/cargo-hack.lock') }}
    - run: echo "::add-path::${{ runner.tool_cache }}/cargo-hack/bin"
    # if `cargo-hack` somehow doesn't exist after loading it from the cache,
    # make *sure* it's there.
    - run: cargo hack --help || { cargo install --force cargo-hack; }
    - name: cargo hack check
      working-directory: ${{ matrix.subcrate }}
      run: cargo hack check --feature-powerset --no-dev-deps

  cargo-check-tracing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        featureset:
        - ""
        - async-await
        - async-await std
        - async-await log-always
        - async-await std log-always
        - log-always
        - std log-always
        - std
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: cargo check
      working-directory: tracing
      run: cargo check --no-default-features --features "${{ matrix.featureset }}"

  cargo-check-subscriber:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        featureset:
        - ""
        - fmt
        - fmt ansi
        - fmt json
        - fmt json ansi
        - fmt registry
        - fmt env-filter
        - registry
        - env-filter
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: cargo check
      working-directory: tracing-subscriber
      run: cargo check --no-default-features --features "${{ matrix.featureset }}"

  test-versions:
    # Test against the stable, beta, and nightly Rust toolchains on ubuntu-latest.
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly, 1.42.0]
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all

  test-build-wasm:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO(securityinsanity): slowly add wasm32 test runner to each crate, and move to seperate actions that run tests.
        subcrate:
        - tracing-appender
        - tracing-attributes
        - tracing-core
        - tracing-error
        - tracing-flame
        - tracing-journald
        - tracing-log
        - tracing-macros
        - tracing-opentelemetry
        - tracing-serde
        - tracing-subscriber
        - tracing-tower
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        target: wasm32-unknown-unknown
        toolchain: stable
        override: true
    - name: build all tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-run -p ${{ matrix.subcrate }}

  test-wasm:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subcrate:
        - tracing
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        target: wasm32-unknown-unknown
        toolchain: stable
        override: true
    - name: install test runner for wasm
      run:  curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: run wasm tests
      run: cd ${{ matrix.subcrate }} && wasm-pack test --node

  test-os:
    # Test against stable Rust across macOS, Windows, and Linux.
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all

  features-stable:
    # Feature flag tests that run on stable Rust.
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: "Test log support"
      run: (cd tracing/test-log-support && cargo test)
    - name: "Test static max level"
      run: (cd tracing/test_static_max_level_features && cargo test)
    - name: "Test tracing-core no-std support"
      run: (cd tracing-core && cargo test --no-default-features)
    - name: "Test tracing no-std support"
      run: (cd tracing && cargo test --no-default-features)
  style:
    # Check style.
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
        profile: minimal
        override: true
    - name: rustfmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

  warnings:
    # Check for any warnings. This is informational and thus is allowed to fail.
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy
        profile: minimal
    - name: Clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all --bins --examples --tests --benches -- -D warnings

  cargo-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - name: Fetch latest release version of cargo-audit
      run: |
        mkdir -p .github/caching
        cargo search cargo-audit | grep '^cargo-audit' | awk '{gsub(/"/,"",$3); print $3}' > .github/caching/cargo-audit.lock
    - name: Cache cargo-audit/bin
      id: cache-cargo-audit
      uses: actions/cache@v1
      with:
        path: ${{ runner.tool_cache }}/cargo-audit/bin
        key: cargo-audit-bin-${{ hashFiles('.github/caching/cargo-audit.lock') }}
    - name: Install cargo-audit
      if: "steps.cache-cargo-audit.outputs.cache-hit != 'true'"
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: --root ${{ runner.tool_cache }}/cargo-audit --force cargo-audit
    - run: echo "::add-path::${{ runner.tool_cache }}/cargo-audit/bin"
    - run: cargo audit
